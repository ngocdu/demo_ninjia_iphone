#include "HelloWorldScene.h"#include "SimpleAudioEngine.h"using namespace cocos2d;using namespace CocosDenshion;CCScene* HelloWorld::scene(){    // 'scene' is an autorelease object    CCScene *scene = CCScene::create();        // 'layer' is an autorelease object    HelloWorld *layer = HelloWorld::create();    // add layer as a child to scene    scene->addChild(layer);    // return the scene    return scene;}// on "init" you need to initialize your instancebool HelloWorld::init(){    //////////////////////////////    // 1. super init first    if(!CCLayerColor::initWithColor(ccc4(255,255,255,255)))    {        return false;    }    this->setTouchEnabled(true);    CCSize size=CCDirector::sharedDirector()->getWinSize();    /////////////////////////////    // 2. add a menu item with "X" image, which is clicked to quit the program    //    you may modify it.    // add a "close" icon to exit the progress. it's an autorelease object    CCMenuItemImage *pCloseItem = CCMenuItemImage::create(                                        "CloseNormal.png",                                        "CloseSelected.png",                                        this,                                        menu_selector(HelloWorld::menuCloseCallback) );    pCloseItem->setPosition( ccp(CCDirector::sharedDirector()->getWinSize().width - 20, 20) );    // create menu, it's an autorelease object    CCMenu* pMenu = CCMenu::create(pCloseItem, NULL);    pMenu->setPosition( CCPointZero );    this->addChild(pMenu, 1);        //add player    player = CCSprite::create("Player.png");    player->setPosition(ccp(player->getContentSize().width/2, size.height/2));    this->addChild(player);        //create array target    arrayTarget = new CCArray();    arrayProjectile = new CCArray();        this->schedule(schedule_selector(HelloWorld::gamelogictarget), 1);    this->schedule(schedule_selector(HelloWorld::update), 1/60);    return true;}void HelloWorld::menuCloseCallback(CCObject* pSender){    CCDirector::sharedDirector()->end();#if (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)    exit(0);#endif}void HelloWorld::addtaget(){    CCSprite *sp = CCSprite::create("Target.png");    CCSize size = CCDirector::sharedDirector()->getWinSize();    int y = rand() % (int)size.height;    sp->setPosition(ccp(size.width+100, y));    CCMoveTo *move = CCMoveTo::create(7, ccp(-50, y));    CCCallFuncN *remove = CCCallFuncN::create(this,callfuncN_selector(HelloWorld::removeTarget));    CCSequence * sq=(CCSequence*)CCSequence::createWithTwoActions(move, remove);    sp->runAction(sq);    this->addChild(sp);    arrayTarget->addObject(sp);    }void HelloWorld::gamelogictarget(float dt){    this->addtaget();}void HelloWorld::removeTarget(CCNode *sprite){    CCSprite *sp= (CCSprite*)sprite;    arrayTarget->removeObject(sp);    this->removeChild(sp);    }void HelloWorld::removeProjectile(cocos2d::CCNode *node){    CCSprite * sp= (CCSprite *)node;    arrayProjectile->removeObject(sp);    this->removeChild(sp);}bool HelloWorld::ccTouchBegan(CCTouch *touch,CCEvent *event){    CCPoint point = touch->getLocationInView();    this->location = CCDirector::sharedDirector()->convertToGL(point);    return true;}void HelloWorld::ccTouchesMoved(cocos2d::CCSet* touches,cocos2d::CCEvent* event){	CCTouch *touch1 = (CCTouch*)(touches->anyObject());	CCPoint p2 = touch1->getLocationInView();	location=CCDirector::sharedDirector()->convertToGL(p2);    player->setPosition(location);}void HelloWorld::ccTouchesEnded(cocos2d::CCSet* touches,cocos2d::CCEvent* event){	CCSize winSize = CCDirector::sharedDirector()->getWinSize();	CCTouch *touch1=(CCTouch*)(touches->anyObject());	CCPoint location=touch1->getLocationInView();	this->location=CCDirector::sharedDirector()->convertToGL(location);        	CCSprite *projectile = CCSprite::create("Projectile.png");	projectile->setPosition( ccp(20, winSize.height/2) );    arrayProjectile->addObject(projectile);	// Determinie offset of location to projectile	float offX = location.x - projectile->getPosition().x;	float offY = location.y - projectile->getPosition().y;    	// Bail out if we are shooting down or backwards	if (offX <= 0) return;    	// Ok to add now - we've double checked position	this->addChild(projectile);    	// Determine where we wish to shoot the projectile to	float realX = winSize.width + (projectile->getContentSize().width/2);	float ratio = offY / offX;	float realY = (realX * ratio) + projectile->getPosition().y;    float y =0;    if(realY > winSize.height/2)    {        y = winSize.height - realY;    }    else if(realY < winSize.height/2)    {        y = winSize.height - realY;    }    	CCPoint realDest = ccp(realX, y);    	// Determine the length of how far we're shooting	float offRealX = realX - projectile->getPosition().x;	float offRealY = (realY - projectile->getPosition().y);	float length = sqrtf((offRealX * offRealX) + (offRealY*offRealY));	float velocity = 480/1; // 480pixels/1sec	float realMoveDuration = length/velocity;    CCMoveTo *move = CCMoveTo::create(realMoveDuration,realDest);    CCCallFuncN *remove = CCCallFuncN::create(this,callfuncN_selector(HelloWorld::removeProjectile));        CCSequence * sq=(CCSequence*)CCSequence::createWithTwoActions(move, remove);    projectile->runAction(sq);        CocosDenshion::SimpleAudioEngine::sharedEngine()->playEffect("pew-pew-lei.wav");}void HelloWorld::update(float dt){    CCObject *i ;    CCObject *j ;    CCObject *i1 ;    CCObject *j1;    CCArray *targetsremove = new CCArray();    CCArray *projectilesremove = new CCArray();    CCARRAY_FOREACH(arrayTarget, i)    {        CCSprite * target = (CCSprite*)i;        int kc2 = ccpDistance(player->getPosition(), target->getPosition());        if (kc2 <= target->getContentSize().width/2) {            targetsremove->addObject(target);                        //cho hieu ung no tai vi tri qua bom vua xoa            CCParticleSystemQuad *emitter1 = CCParticleSystemQuad::create("SmallSun.plist");            emitter1->setStartColor(ccc4f(0,0.3,0.5,1));            emitter1->setBlendAdditive(false);            emitter1->setDuration(1);            emitter1->setPosition(target->getPosition());            this->addChild(emitter1);        }        CCARRAY_FOREACH(arrayProjectile, j)        {            CCSprite * projectile = (CCSprite*)j;            int kc = ccpDistance(target->getPosition(), projectile->getPosition());            if (kc <= target->getContentSize().width/2) {                targetsremove->addObject(target);                projectilesremove->addObject(projectile);                                //cho hieu ung no tai vi tri qua bom vua xoa                CCParticleSystemQuad *emitter1 = CCParticleSystemQuad::create("SmallSun.plist");                emitter1->setStartColor(ccc4f(0,0.3,0.5,1));                emitter1->setBlendAdditive(false);                emitter1->setDuration(1);                emitter1->setPosition(projectile->getPosition());                this->addChild(emitter1);            }        }        CCARRAY_FOREACH(targetsremove, i1)        {            CCSprite *tg = (CCSprite*)i1;            arrayTarget->removeObject(tg);            this->removeChild(tg,true);        }        CCARRAY_FOREACH(projectilesremove, j1)        {            CCSprite *pr = (CCSprite*)j1;            arrayProjectile->removeObject(pr);            this->removeChild(pr,true);        }    }   }